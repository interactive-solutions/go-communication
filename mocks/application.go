// Code generated by mockery v1.0.0
package communication_mocks

import communication "github.com/interactive-solutions/go-communication"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// HttpHandler provides a mock function with given fields:
func (_m *Application) HttpHandler() *communication.HttpHandler {
	ret := _m.Called()

	var r0 *communication.HttpHandler
	if rf, ok := ret.Get(0).(func() *communication.HttpHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*communication.HttpHandler)
		}
	}

	return r0
}

// SendEmail provides a mock function with given fields: id, locale, email, externalId, params
func (_m *Application) SendEmail(id string, locale string, email string, externalId string, params map[string]interface{}) error {
	ret := _m.Called(id, locale, email, externalId, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]interface{}) error); ok {
		r0 = rf(id, locale, email, externalId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSms provides a mock function with given fields: id, locale, number, externalId, params
func (_m *Application) SendSms(id string, locale string, number string, externalId string, params map[string]interface{}) error {
	ret := _m.Called(id, locale, number, externalId, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]interface{}) error); ok {
		r0 = rf(id, locale, number, externalId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *Application) Shutdown(ctx context.Context) {
	_m.Called(ctx)
}
